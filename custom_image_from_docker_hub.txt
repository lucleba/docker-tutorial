Create network
	MacOS/Linux:
		docker network create todo-app-network
	Windows:
		docker network create --driver nat todo-app-network
	
Run container with the above network	
	MacOS/Linux: create default db (todoDB)
		docker run -d \
		--name mysql-container \
		--network todo-app-network \
		--network-alias todo-app-network-alias \
		-p 3308:3306 \
		-v todo-mysql-database:/var/lib/mysql \
		-e MYSQL_ROOT_PASSWORD=Abc@123456789 \
		-e MYSQL_DATABASE=todoDB \
		-d mysql
		
	Windows: create default db (todoDB)
		docker run -d ^
		--name mysql-container ^
		--network todo-app-network ^
		--network-alias todo-app-network-alias ^
		-p 3308:3306 ^
		-v todo-mysql-database:/var/lib/mysql ^
		-e MYSQL_ROOT_PASSWORD=Abc@123456789 ^
		-e MYSQL_DATABASE=todoDB ^
		-d mysql
		
Create another container, has the same network sử dụng  dockerhub:  nicolaka/netshoot 
	(có nhiều thằng netshoot, tuy nhiên thằng nicolaka này nó có tài liệu chi tiết đọc để hiểu :D )
	Mục đích: Xử lý sự cố mạng Docker và Kubernetes có thể trở nên phức tạp. 
	Với sự hiểu biết đúng đắn về cách hoạt động của mạng Docker và Kubernetes cũng như bộ công cụ phù hợp, 
	bạn có thể khắc phục sự cố và giải quyết các sự cố mạng này.
	
	
	MacOS/Linux:
		docker run -it \
		--network todo-app-network \
		--name netshoot-container \
		nicolaka/netshoot
		
	Windows:
		docker run -it ^
		--network todo-app-network ^
		--name netshoot-container ^
		nicolaka/netshoot
	
	khi run cùng với -it, thì container sẽ được khởi chạy và tương tác với command line của container
	khi thoát khỏi command line thì container cũng sẽ bị xóa.
	để tương tác với mạng của mysql sử dụng lệnh dig 
	
		dig = DNS lookup utility
		dig todo-app-network-alias


Create NodeJS container	
	-w: working directory
	pwd : show current folder on linux
	
	MacOS/Linux:
		docker run -dp 8002:8000 \
		--name todo-app-container \
		-w /app \
		-v "$(pwd):/app" \
		--network todo-app-network \
		-e MYSQL_HOST=todo-app-network-alias \
		-e MYSQL_USER=root \
		-e MYSQL_PASSWORD=Abc@123456789 \
		-e MYSQL_DB=todoDB \
		node \
		sh -c "yarn install && yarn run:dev"
	
	Windows:
		docker run -dp 8002:8000 ^
		--name todo-app-container ^
		-w /app ^
		-v "C:\Users\6137\work\AWS\Git\nodjs-app:/app" ^
		--network todo-app-network ^
		-e MYSQL_HOST=todo-app-network-alias ^
		-e MYSQL_USER=root ^
		-e MYSQL_PASSWORD=Abc@123456789 ^
		-e MYSQL_DB=todoDB ^
		node ^
		sh -c "yarn install && yarn run:dev"
	
Cài đặt và chạy thử APP trên PC 	
	cài đặt NodeJS  https://nodejs.org/en/download/
	sau khi cài đặt xong thì init project
		npm init -y
		tạo file index.js
		npm install -g yarn
		yarn add ronin-server ronin-mocks
		npm install -g nodemon
	run server:
		nodemon --watch server.js
	
Đóng gói app => tạo dockerfile => tạo image => run container
	Tạo file Dockerfile  ( reference doc : https://docs.docker.com/engine/reference/builder/ )
	Tạo file .dockerignore   file khai báo những resource sẽ bị bỏ qua khi chạy Dockerfile (không build vào image)
	
	Build the container image 
	docker build -t node-mysql .
	
Push image to docker hub repository
	Rename image 
		docker tag local-image:tagname new-repo:tagname
	docker push new-repo:tagname	
	
Run Container from custom image 
	
	Windows:
		docker run -dp 8002:8000 ^
		--name node-mysql-container ^
		-w /app ^
		-v "C:\Users\6137\work\AWS\Git\nodjs-app:/app" ^
		--network todo-app-network ^
		-e MYSQL_HOST=todo-app-network-alias ^
		-e MYSQL_USER=root ^
		-e MYSQL_PASSWORD=Abc@123456789 ^
		-e MYSQL_DB=todoDB ^
		thienluc/node-mysql:v1.0 ^
		sh -c "yarn install && yarn run:dev"
